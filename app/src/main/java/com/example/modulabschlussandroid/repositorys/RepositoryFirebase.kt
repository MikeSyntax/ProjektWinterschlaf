package com.example.modulabschlussandroid.repositorys

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.example.modulabschlussandroid.data.datamodels.Advertisement
import com.example.modulabschlussandroid.data.datamodels.PersonalData
import com.google.android.gms.tasks.Task
import com.google.android.gms.tasks.TaskCompletionSource
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.firestore.FirebaseFirestore


class RepositoryFirebase(

) {

    private var firebaseAuth = FirebaseAuth.getInstance()

    private var database = FirebaseDatabase.getInstance()

    private var fireStoreDatabase = FirebaseFirestore.getInstance()

//Firebase Firestore================================================================================


    //Live Data des aktuellen Users Id
    private var _uId: MutableLiveData<String> = MutableLiveData()
    val uId: MutableLiveData<String>
        get() = _uId

    //LiveData für den aktuellen user und alle Daten über den User
    private var _currentUser: MutableLiveData<PersonalData> = MutableLiveData()
    val currentUser: LiveData<PersonalData>
        get() = _currentUser

    //Funktion um den aktuellen User upzudaten und die Daten aus dem Firestore zu holen
    fun updateCurrentUserFromFirestore() {
        fireStoreDatabase.collection("user").document(uId.value.toString())
            .get()
            .addOnSuccessListener { thisUser ->
                Log.d(
                    "Firebase Repo Store",
                    "SuccesListener FireStore done - Id ${uId.value.toString()}"
                )
                _currentUser.value = PersonalData(
                    thisUser.id,
                    thisUser.data?.get("cityName").toString(),
                    thisUser.data?.get("countInsertedItems").toString(),
                    thisUser.data?.get("itemsDone").toString(),
                    thisUser.data?.get("name").toString(),
                    thisUser.data?.get("preName").toString(),
                    thisUser.data?.get("registered").toString(),
                    thisUser.data?.get("streetName").toString(),
                    thisUser.data?.get("streetNumber").toString(),
                    thisUser.data?.get("telNumber").toString(),
                    thisUser.data?.get("userName").toString(),
                    thisUser.data?.get("zipCode").toString()
                )
                // Log.e("Repo", " User Data set failed in firestore")
            }.addOnFailureListener { Log.e("Firebase Repo Store", "FailureListener $it") }
    }


    //Funktion um einen neuen User im Firestore anzulegen
    fun newUserDataFirstSignIn(personalData: PersonalData) {
        fireStoreDatabase.collection("user")
            //Hier wird die User Id aus der Auth übergeben, da sonst eine autogenerated Id übergeben wird
            .document(uId.value.toString())
            .set(personalData)
            .addOnSuccessListener { documentRef ->
                Log.d("Repo Firebase", "DocumentSnapshot added $documentRef")
            }
            .addOnFailureListener { error ->
                Log.e("Repo Firebase", "Error adding document $error")
            }
    }

//Firebase Authentication===========================================================================

    //Funktion für den Login ===========================================================================
    //Da die Funktion im Repository ist, muss hier falls der Login erfolgreich ist und nicht sofort
    // weitergeleitet werden kann , eine Task als String "succes" (oder was auch immer) übergeben
    // werden und so kann im Fragment dann ein OnSuccessListener installiert werden
    fun login(email: String, password: String, context: Context): Task<String> {
        //Instanz der TaskSource erstellen als String
        val completionSource = TaskCompletionSource<String>()
        //Prüfung der Eingaben
        if (email.isNotEmpty() && password.isNotEmpty()) {
            //Einloggen mit Email und Passwort
            firebaseAuth.signInWithEmailAndPassword(email, password)
                //falls erfolgreich...
                .addOnCompleteListener {
                    //Wenn der Login erfolgreich war...
                    if (it.isSuccessful) {
                        //... dann setze die completionSource auf erfolgreich
                        completionSource.setResult("succes")
                    } else {
                        Toast.makeText(
                            context,
                            "Error ${it.exception.toString()}",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
        } else {
            Toast.makeText(context, "Leere Felder sind nicht erlaubt", Toast.LENGTH_SHORT)
                .show()
        }
        //returne die Task und so kann man in jedem fragment darauf zugreifen
        return completionSource.task
    }

    //Registrierung eines neuen Users mit Erfolgsübergabe um die Weiterleitung zu ermöglichen
    fun register(email: String, password: String, passConfirmation: String, context: Context): Task<String> {
        val completionSource = TaskCompletionSource<String>()
        //Prüfung der Eingaben
        if (email.isNotEmpty() && password.isNotEmpty() && passConfirmation.isNotEmpty()) {
            if (password == passConfirmation) {
                firebaseAuth.createUserWithEmailAndPassword(email, password)
                    .addOnCompleteListener {
                        if (it.isSuccessful) {
                            completionSource.setResult("success")
                        } else {
                            Toast.makeText(
                                context,
                                it.exception.toString(),
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
            } else {
                Toast.makeText(
                    context,
                    "Passwörter stimmen nicht überein",
                    Toast.LENGTH_SHORT
                )
                    .show()
            }
        } else {
            Toast.makeText(
                context,
                "Bitte alle Felder ausfüllen",
                Toast.LENGTH_SHORT
            )
                .show()
        }
        return completionSource.task
    }

    //Update der aktuellen Users Id
    fun showCurrentUserId() {
        val user = firebaseAuth.currentUser?.uid.toString()
        _uId.value = user
        Log.d("Firebase Repo 3 Punkte", "_uId ${_uId.value} user $user uId ${uId.value}")
    }

    //Ausloggen des aktuellen Users
    fun signOutUser() {
        //Ausloggen
        firebaseAuth.signOut()
    }

//Firebase Database=================================================================================

    //Das erstellte Objekt soll an die Firebase Datenbank gesendet werden
    fun saveItemToDatabase(advertisement: Advertisement) {

        //und eine Reference setzten in der Kategorie myObjects
        val ref = database.getReference("objectsOnline")
        // Log.d("Firebase Repo Data", "Reference $ref")

        //Hier wird jedesmal wenn es aufgerufen wird eine Id gesetzt
        val objectId = ref.push().key
        // Log.d("Firebase Repo Data", "objectId $objectId")

        //hier wird in der Database das Objekt gesetzt bzw. erschaffen und noch ein CompleteListener zum überprüfen
        ref.child(objectId!!).setValue(advertisement)
            //Erfolgreich???
            .addOnSuccessListener {
                //  Log.d("Firebase Repo Data", "Data inserted successfully")
                //Fehler???
            }.addOnFailureListener {
                //   Log.e("Firebase Repo Data", "inserted failed $it")
            }
    }

//Abfrage in der Firebase Database wieviele Anzeigen im Moment online sind==========================

    //LiveData für den aktuellen user und alle Daten über den User
    private var _countAdvertises: MutableLiveData<String> = MutableLiveData()
    val countAdvertises: LiveData<String>
        get() = _countAdvertises

    //Funktion zur Abfrage der aktuellen UserAnzeigen
    fun countAdvertises() {
        //und eine Reference setzten in der Kategorie objectsOnline
        val ref = database.getReference("objectsOnline")
        ref.get().addOnSuccessListener {
            _countAdvertises.postValue("Inserate online ${it.childrenCount}")
        }
    }

//Abfrage in der Firebase Database und erstellen eines Advertisments aller Anzeigen online==========

    //Live Data für die ausgelesenenen Advertisments
    private var _allAdvertises: MutableLiveData<List<Advertisement>> = MutableLiveData()
    val allAdvertises: LiveData<List<Advertisement>>
        get() = _allAdvertises


    fun readDatabase() {
        //Leere Liste für die Advertises
        val advertise: MutableList<Advertisement> = mutableListOf()
        //und eine Reference setzten in der Kategorie objectsOnline
        val ref = database.getReference("objectsOnline")
        //Log.d("Firebase Repo Data", "Reference $ref")
        //bekomme einen SuccessListener für jeden ....
        ref.get().addOnSuccessListener {
            //Log.d("Firebase Repo Data", "Success $it")
            //For Schleife also für jedes children in der Datenbank...
            for (snapshot in it.children) {
                //Log.d("Firebase Repo Data Schleife", "Alle id´s ${snapshot.child("objectId").value}")
                //Füge dieses ausgelesene der advertise Lise hinzu
                advertise.add(Advertisement(snapshot))
                //filtere die Liste nach der UserId und füge die in Übereinstimmung der neuen Liste hinzu
                val filteredAds = advertise.filter { myAds ->
                    //vergleiche die Ids
                    myAds.userId == uId.value
                }
                //die gefilterte Liste mit dem Live Data setzen
                _allAdvertises.value = filteredAds
                //  Log.d("Firebase Repo Data Schleife", "Alle id´s ${allAdvertises.value}")
            }
        }.addOnFailureListener {
            //Log.d("Firebase Repo Data", "Error $it")
        }
    }
}
//==================================================================================================
